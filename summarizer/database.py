import os
import datetime

import sqlalchemy
from sqlalchemy.orm import sessionmaker, DeclarativeBase
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy import String, Text, DateTime, ARRAY
from pydantic import BaseModel

DATABASE_URL = os.getenv("DATABASE_URL", "")


engine = sqlalchemy.create_engine(
    DATABASE_URL,
    echo=True,
)


class Base(DeclarativeBase):
    pass


class PaperRow(Base):
    __tablename__ = "papers"

    id: Mapped[str] = mapped_column(String, primary_key=True)
    # ID of the paper in the database
    src: Mapped[str] = mapped_column(String, primary_key=True)
    # Source of the paper (e.g. arxiv, etc.)

    title: Mapped[str] = mapped_column(String, nullable=False)
    abstract: Mapped[str] = mapped_column(Text, nullable=False)

    authors: Mapped[list[str]] = mapped_column(ARRAY(String), nullable=False)
    organizations: Mapped[list[str]] = mapped_column(ARRAY(String), nullable=False)

    url: Mapped[str] = mapped_column(
        String, nullable=False
    )  # URL to the paper publishment page
    pdf: Mapped[str] = mapped_column(
        String, nullable=False
    )  # URL to the PDF of the paper

    journal: Mapped[str | None] = mapped_column(String, nullable=True)
    doi: Mapped[str | None] = mapped_column(String, nullable=True)

    topics: Mapped[list[str] | None] = mapped_column(
        ARRAY(String), nullable=True
    )  # List of topics extracted from the paper
    summary: Mapped[str | None] = mapped_column(
        Text, nullable=True
    )  # Summary generated by the llm

    published_at: Mapped[datetime.datetime] = mapped_column(DateTime, nullable=False)
    updated_at: Mapped[datetime.datetime] = mapped_column(DateTime, nullable=False)


Base.metadata.create_all(engine)

connection = engine.connect()
Session = sessionmaker(bind=engine)
